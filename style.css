const quizData = [
  { 
    question: "What does HTML stand for?", 
    options: ["Hyper Text Markup Language", "Hot Mail", "How To Make Landingpage", "Hyperlinks and Text Markup Language"], 
    answer: 0,
    funFact: "HTML was created by Tim Berners-Lee in 1991!"
  },
  { 
    question: "What does CSS stand for?", 
    options: ["Computer Style Sheets", "Cascading Style Sheets", "Creative Style Syntax", "Colorful Style Structure"], 
    answer: 1,
    funFact: "CSS was first proposed by H√•kon Wium Lie in 1994 while working with Tim Berners-Lee at CERN."
  },
  { 
    question: "Inside which HTML element do we put JavaScript?", 
    options: ["<js>", "<scripting>", "<script>", "<javascript>"], 
    answer: 2,
    funFact: "The <script> tag can load both internal and external JavaScript files."
  },
  { 
    question: "Which language runs in a web browser?", 
    options: ["Java", "C", "Python", "JavaScript"], 
    answer: 3,
    funFact: "JavaScript was created in just 10 days by Brendan Eich in 1995!"
  },
  { 
    question: "What year was JavaScript launched?", 
    options: ["1996", "1995", "1994", "None of the above"], 
    answer: 1,
    funFact: "JavaScript was originally named Mocha, then LiveScript, before finally being named JavaScript."
  },
  { 
    question: "What does SQL stand for?", 
    options: ["Stylish Question Language", "Stylesheet Query Language", "Structured Query Language", "Statement Query Level"], 
    answer: 2,
    funFact: "SQL was developed at IBM in the 1970s and became a standard in 1986."
  },
  { 
    question: "Which company developed the React library?", 
    options: ["Google", "Microsoft", "Facebook", "Apple"], 
    answer: 2,
    funFact: "React was first deployed on Facebook's News Feed in 2011 and later on Instagram in 2012."
  },
  { 
    question: "What does API stand for?", 
    options: ["Application Programming Interface", "Apple Programming Interface", "Application Processing Integration", "Application Program Interaction"], 
    answer: 0,
    funFact: "APIs allow different software systems to communicate with each other, like waiters between customers and kitchen."
  },
  { 
    question: "Which is not a programming language?", 
    options: ["HTML", "Python", "Java", "C++"], 
    answer: 0,
    funFact: "HTML is a markup language, not a programming language, as it doesn't have logic capabilities."
  },
  { 
    question: "Which CSS property controls the text size?", 
    options: ["font-style", "text-size", "font-size", "text-style"], 
    answer: 2,
    funFact: "CSS font-size can be specified in px, em, rem, %, and other units!"
  }
];

let currentQuestion = 0;
let score = 0;
let shuffledQuestions = [];
const fruits = ['üçé', 'üçä', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçë', 'ü•≠'];

const questionEl = document.getElementById("question");
const optionsEl = document.getElementById("options");
const feedbackEl = document.getElementById("feedback");
const nextBtn = document.getElementById("nextBtn");
const resultEl = document.getElementById("result");
const scoreEl = document.getElementById("score");
const currentScoreEl = document.getElementById("currentScore");
const totalQuestionsEl = document.getElementById("totalQuestions");
const finalCommentEl = document.getElementById("finalComment");
const playAgainBtn = document.getElementById("playAgainBtn");

function goFullScreen() {
  try {
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen().catch(err => {
        console.log("Fullscreen error:", err);
      });
    }
  } catch (e) {
    console.log("Fullscreen not supported:", e);
  }
}

function startGame() {
  shuffledQuestions = [...quizData].sort(() => 0.5 - Math.random());
  currentQuestion = 0;
  score = 0;
  currentScoreEl.textContent = score;
  totalQuestionsEl.textContent = shuffledQuestions.length;
  document.getElementById("quiz").classList.remove("hidden");
  resultEl.classList.add("hidden");
  goFullScreen();
  loadQuestion();
}

function loadQuestion() {
  feedbackEl.textContent = "";
  feedbackEl.className = "";
  const current = shuffledQuestions[currentQuestion];
  questionEl.textContent = `${currentQuestion + 1}. ${current.question}`;
  optionsEl.innerHTML = "";
  
  // Shuffle options while keeping track of correct answer
  const optionsWithIndex = current.options.map((option, index) => ({ option, originalIndex: index }));
  const shuffledOptions = optionsWithIndex.sort(() => 0.5 - Math.random());
  let newCorrectIndex = -1;
  
  shuffledOptions.forEach((item, newIndex) => {
    if (item.originalIndex === current.answer) {
      newCorrectIndex = newIndex;
    }
    const btn = document.createElement("button");
    btn.textContent = item.option;
    btn.dataset.originalIndex = item.originalIndex;
    btn.addEventListener("click", () => checkAnswer(newIndex, newCorrectIndex));
    optionsEl.appendChild(btn);
  });
}

function checkAnswer(selected, correctIndex) {
  const allButtons = optionsEl.querySelectorAll("button");
  
  // Disable all buttons after selection
  allButtons.forEach(btn => {
    btn.disabled = true;
    btn.style.opacity = "0.7";
  });
  
  if (selected === correctIndex) {
    score++;
    currentScoreEl.textContent = score;
    feedbackEl.textContent = `üéâ YAAAAAY! CORRECT ANSWER! üéâ\n\n${shuffledQuestions[currentQuestion].funFact || "Great job!"}`;
    feedbackEl.className = "correct";
    
    // Add celebration effects
    createFallingFruits();
    createConfetti();
    
    // Highlight correct answer
    allButtons[selected].style.background = "#4CAF50";
    allButtons[selected].style.color = "white";
    allButtons[selected].style.border = "2px solid #45a049";
    allButtons[selected].style.transform = "scale(1.05)";
  } else {
    feedbackEl.textContent = `‚ùå Oops! The correct answer was: ${shuffledQuestions[currentQuestion].options[shuffledQuestions[currentQuestion].answer]}\n\n${shuffledQuestions[currentQuestion].funFact || "Better luck next time!"}`;
    feedbackEl.className = "incorrect";
    
    // Highlight wrong and correct answers
    allButtons[selected].style.background = "#f44336";
    allButtons[selected].style.color = "white";
    allButtons[selected].style.border = "2px solid #d32f2f";
    
    allButtons[correctIndex].style.background = "#4CAF50";
    allButtons[correctIndex].style.color = "white";
    allButtons[correctIndex].style.border = "2px solid #45a049";
    allButtons[correctIndex].style.transform = "scale(1.05)";
  }
  
  nextBtn.style.display = "block";
}

function createFallingFruits() {
  for (let i = 0; i < 10; i++) {
    const fruit = document.createElement("div");
    fruit.className = "fruit";
    fruit.textContent = fruits[Math.floor(Math.random() * fruits.length)];
    fruit.style.left = `${Math.random() * 100}vw`;
    fruit.style.top = "-50px";
    fruit.style.fontSize = `${Math.random() * 20 + 20}px`;
    fruit.style.animationDuration = `${Math.random() * 3 + 2}s`;
    document.body.appendChild(fruit);
    
    // Remove fruit after animation
    setTimeout(() => {
      fruit.remove();
    }, 5000);
  }
}

function createConfetti() {
  const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'];
  
  for (let i = 0; i < 50; i++) {
    const confetti = document.createElement("div");
    confetti.className = "confetti";
    confetti.style.left = `${Math.random() * 100}vw`;
    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
    confetti.style.width = `${Math.random() * 10 + 5}px`;
    confetti.style.height = `${Math.random() * 10 + 5}px`;
    confetti.style.animationDuration = `${Math.random() * 2 + 1}s`;
    document.body.appendChild(confetti);
    
    // Remove confetti after animation
    setTimeout(() => {
      confetti.remove();
    }, 3000);
  }
}

nextBtn.addEventListener("click", () => {
  currentQuestion++;
  nextBtn.style.display = "none";
  if (currentQuestion < shuffledQuestions.length) {
    loadQuestion();
  } else {
    showResult();
  }
});

function showResult() {
  document.getElementById("quiz").classList.add("hidden");
  resultEl.classList.remove("hidden");
  scoreEl.textContent = score;
  totalQuestionsEl.textContent = shuffledQuestions.length;
  
  // Add final comment based on score
  const percentage = (score / shuffledQuestions.length) * 100;
  if (percentage >= 90) {
    finalCommentEl.textContent = "üèÜ Coding Master! You're amazing! üèÜ";
    createConfetti();
    createFallingFruits();
  } else if (percentage >= 70) {
    finalCommentEl.textContent = "üåü Great job! You know your stuff! üåü";
    createConfetti();
  } else if (percentage >= 50) {
    finalCommentEl.textContent = "üëç Good effort! Keep learning! üëç";
  } else {
    finalCommentEl.textContent = "üí° Keep practicing! Every coder starts somewhere! üí°";
  }
}

playAgainBtn.addEventListener("click", startGame);

// Initialize game
startGame();

// Allow exiting fullscreen with ESC
document.addEventListener('fullscreenchange', () => {
  if (!document.fullscreenElement) {
    goFullScreen();
  }
});
